"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤-—Å–∏—Ä–æ—Ç (orphaned files).

–§–∞–π–ª—ã-—Å–∏—Ä–æ—Ç—ã - —ç—Ç–æ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ –¥–∏—Å–∫–µ, –Ω–æ –Ω–µ –∏–º–µ—é—Ç
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py cleanup_orphaned_photos
    python manage.py cleanup_orphaned_photos --dry-run  # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
"""
import os
from django.core.management.base import BaseCommand
from django.conf import settings
from apps.issues.models import IssuePhoto


class Command(BaseCommand):
    help = '–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (orphaned files)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å –∏—Ö',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']

        if dry_run:
            self.stdout.write(self.style.WARNING('–†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê: –§–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã'))
        else:
            self.stdout.write(self.style.WARNING('–í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª—ã –ë–£–î–£–¢ —É–¥–∞–ª–µ–Ω—ã!'))

        # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–æ—Ç–æ –∑–∞–º–µ—á–∞–Ω–∏–π
        issues_media_root = os.path.join(settings.MEDIA_ROOT, 'issues')

        if not os.path.exists(issues_media_root):
            self.stdout.write(self.style.SUCCESS(f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {issues_media_root} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'))
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–∑ –ë–î
        db_files = set()
        for photo in IssuePhoto.objects.all():
            if photo.photo:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file_path = photo.photo.path
                db_files.add(file_path)

        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ {len(db_files)} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
        disk_files = []
        for root, dirs, files in os.walk(issues_media_root):
            for filename in files:
                file_path = os.path.join(root, filename)
                disk_files.append(file_path)

        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ {len(disk_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ')

        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã-—Å–∏—Ä–æ—Ç—ã (–µ—Å—Ç—å –Ω–∞ –¥–∏—Å–∫–µ, –Ω–æ –Ω–µ—Ç –≤ –ë–î)
        orphaned_files = [f for f in disk_files if f not in db_files]

        if not orphaned_files:
            self.stdout.write(self.style.SUCCESS('‚úÖ –§–∞–π–ª–æ–≤-—Å–∏—Ä–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!'))
            return

        self.stdout.write(
            self.style.WARNING(f'\nüóëÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(orphaned_files)} —Ñ–∞–π–ª–æ–≤-—Å–∏—Ä–æ—Ç:\n')
        )

        total_size = 0
        for file_path in orphaned_files:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            total_size += file_size

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            rel_path = os.path.relpath(file_path, settings.MEDIA_ROOT)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            size_str = self._format_size(file_size)

            self.stdout.write(f'  ‚Ä¢ {rel_path} ({size_str})')

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ dry-run
            if not dry_run:
                try:
                    os.remove(file_path)
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}')
                    )

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_size_str = self._format_size(total_size)

        if dry_run:
            self.stdout.write(
                self.style.SUCCESS(
                    f'\nüìä –í—Å–µ–≥–æ –±—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {total_size_str}'
                )
            )
            self.stdout.write(
                self.style.WARNING(
                    f'\n‚ö†Ô∏è  –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run'
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f'\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(orphaned_files)} —Ñ–∞–π–ª–æ–≤ ({total_size_str})'
                )
            )

        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not dry_run:
            self._cleanup_empty_dirs(issues_media_root)

    def _format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥"""
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size_bytes < 1024.0:
                return f'{size_bytes:.1f} {unit}'
            size_bytes /= 1024.0
        return f'{size_bytes:.1f} –¢–ë'

    def _cleanup_empty_dirs(self, root_dir):
        """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        deleted_dirs = 0
        for dirpath, dirnames, filenames in os.walk(root_dir, topdown=False):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if dirpath == root_dir:
                continue

            # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
            if not os.listdir(dirpath):
                try:
                    os.rmdir(dirpath)
                    deleted_dirs += 1
                    rel_path = os.path.relpath(dirpath, root_dir)
                    self.stdout.write(f'  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {rel_path}')
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dirpath}: {e}')
                    )

        if deleted_dirs > 0:
            self.stdout.write(
                self.style.SUCCESS(f'\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_dirs} –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π')
            )
