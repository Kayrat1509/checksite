"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç WebP.

–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ë–î –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WebP,
–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py convert_photos_to_webp
    python manage.py convert_photos_to_webp --dry-run  # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
"""
import os
from django.core.management.base import BaseCommand
from django.core.files.uploadedfile import InMemoryUploadedFile
from apps.issues.models import IssuePhoto
from apps.issues.utils import convert_image_to_webp


class Command(BaseCommand):
    help = '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç WebP'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']

        if dry_run:
            self.stdout.write(self.style.WARNING('–†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê: –§–∞–π–ª—ã –ù–ï –±—É–¥—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã'))
        else:
            self.stdout.write(self.style.WARNING('–í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª—ã –ë–£–î–£–¢ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!'))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WebP
        all_photos = IssuePhoto.objects.all()
        non_webp_photos = []

        for photo in all_photos:
            if photo.photo:
                ext = os.path.splitext(photo.photo.name)[1].lower()
                if ext != '.webp':
                    non_webp_photos.append(photo)

        if not non_webp_photos:
            self.stdout.write(self.style.SUCCESS('‚úÖ –í—Å–µ —Ñ–æ—Ç–æ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WebP!'))
            return

        self.stdout.write(
            self.style.WARNING(f'\nüì∑ –ù–∞–π–¥–µ–Ω–æ {len(non_webp_photos)} —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n')
        )

        converted_count = 0
        error_count = 0
        total_saved_bytes = 0

        for idx, photo in enumerate(non_webp_photos, 1):
            old_path = photo.photo.name
            old_size = photo.photo.size if photo.photo else 0

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
            old_size_str = self._format_size(old_size)

            self.stdout.write(f'[{idx}/{len(non_webp_photos)}] {old_path} ({old_size_str})')

            if dry_run:
                self.stdout.write(self.style.WARNING('  ‚Üí –ë—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WebP'))
                continue

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
                with photo.photo.open('rb') as f:
                    # –°–æ–∑–¥–∞–µ–º InMemoryUploadedFile –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
                    from io import BytesIO
                    file_content = f.read()
                    file_buffer = BytesIO(file_content)

                    # –°–æ–∑–¥–∞–µ–º uploaded file –æ–±—ä–µ–∫—Ç
                    uploaded_file = InMemoryUploadedFile(
                        file=file_buffer,
                        field_name='photo',
                        name=os.path.basename(photo.photo.name),
                        content_type='image/jpeg',  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–∏–ø
                        size=len(file_content),
                        charset=None
                    )

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
                    webp_file = convert_image_to_webp(
                        uploaded_file,
                        quality=85,
                        max_dimension=2560
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    old_file = photo.photo

                    # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
                    photo.photo = webp_file
                    photo.save()

                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                    if old_file.storage.exists(old_file.name):
                        old_file.delete(save=False)

                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                    new_size = photo.photo.size
                    saved_bytes = old_size - new_size
                    total_saved_bytes += saved_bytes

                    new_size_str = self._format_size(new_size)
                    saved_str = self._format_size(saved_bytes)
                    percent = (saved_bytes / old_size * 100) if old_size > 0 else 0

                    self.stdout.write(
                        self.style.SUCCESS(
                            f'  ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {photo.photo.name} ({new_size_str}, '
                            f'—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ {saved_str}, {percent:.1f}%)'
                        )
                    )
                    converted_count += 1

            except Exception as e:
                self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞: {e}'))
                error_count += 1

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f'\n‚ö†Ô∏è  –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run'
                )
            )
        else:
            total_saved_str = self._format_size(total_saved_bytes)
            self.stdout.write(
                self.style.SUCCESS(
                    f'\nüìä –ò—Ç–æ–≥–æ:'
                    f'\n  ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_count}'
                    f'\n  ‚ùå –û—à–∏–±–æ–∫: {error_count}'
                    f'\n  üíæ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –º–µ—Å—Ç–∞: {total_saved_str}'
                )
            )

    def _format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥"""
        if size_bytes < 0:
            return '0 –ë'
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size_bytes < 1024.0:
                return f'{size_bytes:.1f} {unit}'
            size_bytes /= 1024.0
        return f'{size_bytes:.1f} –¢–ë'
