from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.utils.translation import gettext_lazy as _
from django.utils.html import format_html
import json
from .models import User, Company


@admin.register(Company)
class CompanyAdmin(admin.ModelAdmin):
    """Admin interface for Company model."""

    list_display = ['name', 'country', 'phone', 'email', 'get_storage_size', 'is_active', 'created_at']
    list_filter = ['country', 'is_active', 'created_at']
    search_fields = ['name', 'country', 'email', 'phone']
    ordering = ['name']

    fieldsets = (
        (_('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'), {
            'fields': ('name', 'country', 'address', 'phone', 'email'),
            'description': '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π —Ñ–æ—Ä–º–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–û–û "–°—Ç—Ä–æ–π–ö–æ–º–ø–∞–Ω–∏", LLC "BuildCorp")'
        }),
        (_('–°—Ç–∞—Ç—É—Å'), {
            'fields': ('is_active',)
        }),
        (_('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), {
            'fields': ('get_storage_size',),
            'classes': ('collapse',)
        }),
        (_('–î–∞—Ç—ã'), {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    readonly_fields = ['created_at', 'updated_at', 'get_storage_size']

    def get_storage_size(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
        return obj.get_formatted_storage_size()
    get_storage_size.short_description = '–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç–∞'


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    """Admin interface for User model."""

    list_display = [
        'email', 'get_full_name', 'role', 'get_company_display',
        'get_temp_password_status', 'position', 'external_company_name',
        'approved', 'is_active', 'created_at'
    ]
    list_filter = [
        'role', 'company', 'approved', 'is_active', 'is_staff',
        'password_change_required', 'created_at'
    ]
    search_fields = ['email', 'first_name', 'last_name', 'phone', 'external_company_name', 'supervision_company']
    ordering = ['-created_at']
    list_editable = ['approved']

    fieldsets = (
        (None, {'fields': ('email', 'password', 'external_company_name')}),
        (_('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'), {
            'fields': ('first_name', 'last_name', 'middle_name', 'phone', 'avatar')
        }),
        (_('–†–æ–ª—å –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å'), {
            'fields': ('role', 'position', 'company', 'supervision_company', 'secondary_email', 'telegram_id'),
            'description': '–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "–ö–æ–º–ø–∞–Ω–∏—è". –î–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –∏ –Ω–∞–¥–∑–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –∫–æ–º–ø–∞–Ω–∏–∏".'
        }),
        (_('–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å'), {
            'fields': (
                'temp_password', 'password_change_required',
                'login_attempts_with_temp_password', 'temp_password_created_at',
                'display_password_history'
            ),
            'classes': ('collapse',),
            'description': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–∞—Ä–æ–ª–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π'
        }),
        (_('–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞'), {
            'fields': ('is_active', 'is_staff', 'is_superuser', 'is_verified', 'approved', 'groups', 'user_permissions'),
        }),
        (_('–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã'), {'fields': ('last_login', 'created_at', 'updated_at')}),
    )

    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': (
                'email', 'password1', 'password2', 'first_name', 'last_name',
                'middle_name', 'role', 'position', 'company', 'external_company_name', 'supervision_company', 'phone'
            ),
        }),
    )

    readonly_fields = [
        'created_at', 'updated_at', 'last_login', 'temp_password',
        'login_attempts_with_temp_password', 'temp_password_created_at',
        'display_password_history'
    ]

    def get_company_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ForeignKey –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤/–Ω–∞–¥–∑–æ—Ä–æ–≤."""
        if obj.external_company_name:
            return obj.external_company_name
        elif obj.company:
            return obj.company.name
        return '-'
    get_company_display.short_description = '–ö–æ–º–ø–∞–Ω–∏—è'

    def get_temp_password_status(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        if not obj.password_change_required:
            return format_html('<span style="color: green;">‚úì –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π</span>')

        attempts_left = 3 - obj.login_attempts_with_temp_password

        if attempts_left <= 0:
            return format_html('<span style="color: red;">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>')
        elif attempts_left == 1:
            return format_html(
                '<span style="color: orange;">‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π ({} –ø–æ–ø—ã—Ç–∫–∞)</span>',
                attempts_left
            )
        else:
            return format_html(
                '<span style="color: blue;">üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π ({} –ø–æ–ø—ã—Ç–∫–∏)</span>',
                attempts_left
            )
    get_temp_password_status.short_description = '–°—Ç–∞—Ç—É—Å –ø–∞—Ä–æ–ª—è'

    def display_password_history(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä–æ–ª–µ–π –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        if not obj.password_history:
            return format_html('<p>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>')

        html = '<table style="width: 100%; border-collapse: collapse;">'
        html += '<tr style="background-color: #f0f0f0;"><th style="padding: 8px; text-align: left;">–î–∞—Ç–∞</th><th style="padding: 8px; text-align: left;">–î–µ–π—Å—Ç–≤–∏–µ</th><th style="padding: 8px; text-align: left;">–î–µ—Ç–∞–ª–∏</th><th style="padding: 8px; text-align: left;">–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å</th></tr>'

        for idx, entry in enumerate(reversed(obj.password_history)):
            bg_color = '#ffffff' if idx % 2 == 0 else '#f9f9f9'

            action_icons = {
                'created': '‚ûï',
                'changed': 'üîÑ',
                'reset': 'üîÉ'
            }
            icon = action_icons.get(entry.get('action', ''), '‚Ä¢')

            html += f'<tr style="background-color: {bg_color};">'
            html += f'<td style="padding: 8px;">{entry.get("date", "N/A")}</td>'
            html += f'<td style="padding: 8px;">{icon} {entry.get("action", "N/A")}</td>'
            html += f'<td style="padding: 8px;">{entry.get("details", "")}</td>'

            temp_pass = entry.get('temp_password_used', '')
            if temp_pass:
                html += f'<td style="padding: 8px;"><code style="background-color: #fff3cd; padding: 2px 6px; border-radius: 3px;">{temp_pass}</code></td>'
            else:
                html += '<td style="padding: 8px;">-</td>'

            html += '</tr>'

        html += '</table>'

        return format_html(html)
    display_password_history.short_description = '–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä–æ–ª–µ–π'

    actions = ['reset_temp_password_attempts']

    def reset_temp_password_attempts(self, request, queryset):
        """
        –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.
        """
        updated = queryset.filter(password_change_required=True).update(
            login_attempts_with_temp_password=0
        )
        self.message_user(
            request,
            f'–°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        )
    reset_temp_password_attempts.short_description = '–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞'
