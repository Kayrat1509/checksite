version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: checksite_db
    environment:
      POSTGRES_DB: checksite_db
      POSTGRES_USER: checksite_user
      POSTGRES_PASSWORD: checksite_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - checksite_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U checksite_user -d checksite_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: checksite_redis
    ports:
      - "6379:6379"
    networks:
      - checksite_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: checksite_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app            # üî• –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    ports:
      - "8001:8000"
    env_file:
      - ./backend/.env
    environment:
      - DEBUG=True                # üî• Django autoreload –≤–∫–ª—é—á—ë–Ω –ø—Ä–∏ DEBUG=True
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - checksite_network
    develop:                       # üî• –ù–æ–≤–∞—è —Ñ–∏—á–∞ Docker Compose 2.22+
      watch:
        - action: sync
          path: ./backend
          target: /app
        - action: rebuild
          path: ./backend/requirements.txt

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: checksite_celery
    command: celery -A config worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - redis
      - backend
    networks:
      - checksite_network

  # Celery Beat
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: checksite_celery_beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - redis
      - backend
    networks:
      - checksite_network

  # Flower
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: checksite_flower
    command: celery -A config flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - celery
    networks:
      - checksite_network

    # React Frontend (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: checksite_frontend
    command: npm run dev -- --port 5174 --host     # üî• hot reload –Ω–∞ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—Ç—É
    volumes:
      - ./frontend:/app                            # –º–æ–Ω—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
      - /app/node_modules                          # –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    ports:
      - "5174:5174"                                # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—Ç –Ω–∞—Ä—É–∂—É
    environment:
      - NODE_ENV=development                       # —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    depends_on:
      - backend
    networks:
      - checksite_network
    develop:                                       # Docker Compose 2.22+ ‚Äî live sync
      watch:
        - action: sync
          path: ./frontend                         # —Å–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
          target: /app
        - action: rebuild
          path: ./frontend/package.json            # –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äî –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: checksite_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    ports:
      - "80:80"  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 8080 –Ω–∞ 80 –¥–ª—è Cloudflare
    depends_on:
      - backend
      - frontend
    networks:
      - checksite_network

networks:
  checksite_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
